name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on tags like v0.1.0
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build Release
        run: cargo build --release
        
      - name: Create game directory structure
        run: |
          mkdir -p dist/assets
          copy target\release\my-rts-game.exe dist\
          xcopy assets dist\assets\ /E /I /Y
          copy README.md dist\ 2>NUL || echo No README found

      - name: Download Inno Setup
        run: |
          Invoke-WebRequest -Uri "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe" -OutFile innosetup.exe
          Start-Process -FilePath "innosetup.exe" -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-" -Wait

      - name: Create Inno Setup Script
        run: |
          $VERSION = "${{ github.ref_name }}" -replace "v", ""
          cat > installer.iss << EOF
          #define MyAppName "My RTS Game"
          #define MyAppVersion "$VERSION"
          #define MyAppPublisher "Your Name"
          #define MyAppURL "https://github.com/${{ github.repository }}"
          #define MyAppExeName "my-rts-game.exe"

          [Setup]
          AppId={{YOUR_UNIQUE_APP_ID_HERE}
          AppName={#MyAppName}
          AppVersion={#MyAppVersion}
          AppPublisher={#MyAppPublisher}
          AppPublisherURL={#MyAppURL}
          DefaultDirName={autopf}\{#MyAppName}
          DefaultGroupName={#MyAppName}
          AllowNoIcons=yes
          Compression=lzma
          SolidCompression=yes
          OutputDir=installer
          OutputBaseFilename=my-rts-game-setup-{#MyAppVersion}
          ArchitecturesInstallIn64BitMode=x64

          [Languages]
          Name: "english"; MessagesFile: "compiler:Default.isl"

          [Tasks]
          Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

          [Files]
          Source: "dist\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

          [Icons]
          Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
          Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
          Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

          [Run]
          Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
          EOF
        shell: pwsh

      - name: Compile Installer
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss
        shell: pwsh

      - name: Create ZIP Archive
        run: |
          Compress-Archive -Path dist\* -DestinationPath my-rts-game-${{ github.ref_name }}.zip
        shell: pwsh

      - name: Upload Installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: installer/*.exe

      - name: Upload ZIP
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: my-rts-game-${{ github.ref_name }}.zip

  release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            windows-installer/*.exe
            windows-zip/*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
